var g_tablestile="";main();function main(){	//Make certain that user interaction (display of dialogs, etc.) is turned on.	//app.scriptPreferences.userInteractionLevel = UserInteractionLevels.interactWithAll;	if (app.documents.length != 0){		if(myDisplayDialog() == true){				genXMLCode2Table();		}	} else { 	   alert ("ドキュメントを開いてください");	}}function genXMLCode2Table(){	var myDocument = app.activeDocument;	var body = myDocument.xmlElements[0];	//bodyを探す	do{		if(body.markupTag.name == 'body') break;		if(body == null) {			alert ("bodyが見つかりません");			return;		}		body = body.xmlElements[0];	}while(body != null);	//body下の要素を順にたどる	for(var i=0; i<body.xmlElements.length; i++){		var elem = body.xmlElements[i];		if(elem.markupTag.name == 'codelist'){			$.write('table found');			//すでに表が作成されているときは処理しない			if(elem.tables.length > 0){				continue;			}			var table = elem.convertElementToTable(				myDocument.xmlTags.itemByName("pre"),				myDocument.xmlTags.itemByName("code")			);			//table.clearTableStyleOverrides();			table.appliedTableStyle = g_tablestyle;			//$.write('convert table');		}	}	alert ("コンバート完了");}function myDisplayDialog(){	//文字スタイルの一覧を取得	var myDocument = app.activeDocument;	var tablestyles = [];	for(var i=0; i<myDocument.tableStyles.length; i++){		tablestyles.push(myDocument.tableStyles.item(i).name);	}		//ダイアログ生成	var myDialog = app.dialogs.add({name:"Code2Table"});	with(myDialog.dialogColumns.add()){		//説明ラベル		staticTexts.add({staticLabel:"codelistタグを表にコンバートします"});		staticTexts.add({staticLabel:"変換後に適用する表スタイルを選択してください"});		//パネルを追加		with(borderPanels.add()){			with(dialogColumns.add()){				var listboxTableStyle = dropdowns.add					({stringList: tablestyles});			}		}	}		myReturn = myDialog.show();	if (myReturn == true){		g_tablestyle = tablestyles[listboxTableStyle.selectedIndex];		myDialog.destroy();		return true;	} else {		myDialog.destroy();		return false;	}		}